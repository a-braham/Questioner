/**
 * Questioner API
 * Crowd-source questions for a meetup. Questioner helps the meetup organizer prioritize questions to be answered. Other users can vote on asked questions and they bubble to the top or bottom of the log.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kirumba.kamau@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Meetup
import io.swagger.client.model.RSVPs
import io.swagger.client.model.Tags
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object MeetupsApi {

  /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 :  (Successfully deleted)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param meetupId Get one meetup
   */
  def meetupsMeetupIdDeleteDelete(meetupId: Int)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://questioner-system.herokuapp.com/api/v2", "/meetups/{meetup_id}/delete", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("meetup_id", meetupId)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Unit](400)
        /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 : Seq[RSVPs] (Successfully rsvp)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param meetupId Perform Rsvps
   * @param inventoryItem Inventory item to add
   */
  def meetupsMeetupIdRsvpsPost(meetupId: Int, inventoryItem: Option[RSVPs] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[RSVPs]] =
    ApiRequest[Seq[RSVPs]](ApiMethods.POST, "https://questioner-system.herokuapp.com/api/v2", "/meetups/{meetup_id}/rsvps", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(inventoryItem)
      .withPathParam("meetup_id", meetupId)
      .withSuccessResponse[Seq[RSVPs]](201)
      .withErrorResponse[Unit](400)
        /**
   * Adds a list of tags to the system
   * 
   * Expected answers:
   *   code 201 : Seq[Tags] (Successfully added tags)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param meetupId Perform Adding a Tags
   * @param inventoryItem Inventory item to add
   */
  def meetupsMeetupIdTagsPost(meetupId: Int, inventoryItem: Option[Tags] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Tags]] =
    ApiRequest[Seq[Tags]](ApiMethods.POST, "https://questioner-system.herokuapp.com/api/v2", "/meetups/{meetup_id}/tags", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(inventoryItem)
      .withPathParam("meetup_id", meetupId)
      .withSuccessResponse[Seq[Tags]](201)
      .withErrorResponse[Unit](400)
        /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 : Any (Successfully fetched)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param mid Get one meetup
   */
  def meetupsMidGet(mid: Int)(implicit apiKey: ApiKeyValue): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://questioner-system.herokuapp.com/api/v2", "/meetups/{mid}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("mid", mid)
      .withSuccessResponse[Any](201)
      .withErrorResponse[Unit](400)
        /**
   * A meetup can only be created when authenticated. Only the admin has the authentication to create a meetup
   * 
   * Expected answers:
   *   code 201 : Seq[Meetup] (Successfully created)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param inventoryItem Inventory item to add
   */
  def meetupsPost(inventoryItem: Option[Meetup] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Meetup]] =
    ApiRequest[Seq[Meetup]](ApiMethods.POST, "https://questioner-system.herokuapp.com/api/v2", "/meetups", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(inventoryItem)
      .withSuccessResponse[Seq[Meetup]](201)
      .withErrorResponse[Unit](400)
        /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 : Any (Successfully fetched)
   *   code 400 :  (bad input parameters)
   */
  def meetupsUpcomingGet(): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "https://questioner-system.herokuapp.com/api/v2", "/meetups/upcoming", "application/json")
      .withSuccessResponse[Any](201)
      .withErrorResponse[Unit](400)
      

}

