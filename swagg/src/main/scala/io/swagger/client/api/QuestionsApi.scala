/**
 * Questioner API
 * Crowd-source questions for a meetup. Questioner helps the meetup organizer prioritize questions to be answered. Other users can vote on asked questions and they bubble to the top or bottom of the log.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kirumba.kamau@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Comment
import io.swagger.client.model.Question
import io.swagger.client.model.Vote
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object QuestionsApi {

  /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 : Seq[Question] (Successfully saved)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param meetupId Get one meetup and send data
   * @param inventoryItem Inventory item to add
   */
  def questionsMeetupMeetupIdPost(meetupId: Int, inventoryItem: Option[Question] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Question]] =
    ApiRequest[Seq[Question]](ApiMethods.POST, "https://questioner-system.herokuapp.com/api/v2", "/questions/meetup/{meetup_id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(inventoryItem)
      .withPathParam("meetup_id", meetupId)
      .withSuccessResponse[Seq[Question]](201)
      .withErrorResponse[Unit](400)
        /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 : Seq[Comment] (Successfully commented)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param qId Do comments
   * @param inventoryItem Inventory item to add
   */
  def questionsQIdCommentPost(qId: Int, inventoryItem: Option[Comment] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Comment]] =
    ApiRequest[Seq[Comment]](ApiMethods.POST, "https://questioner-system.herokuapp.com/api/v2", "/questions/{q_id}/comment", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(inventoryItem)
      .withPathParam("q_id", qId)
      .withSuccessResponse[Seq[Comment]](201)
      .withErrorResponse[Unit](400)
        /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 : Seq[Vote] (Successfully voted)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param questionId Do voting down
   * @param inventoryItem Inventory item to add
   */
  def questionsQuestionIdDownvotePatch(questionId: Int, inventoryItem: Option[Vote] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Vote]] =
    ApiRequest[Seq[Vote]](ApiMethods.PATCH, "https://questioner-system.herokuapp.com/api/v2", "/questions/{question_id}/downvote", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(inventoryItem)
      .withPathParam("question_id", questionId)
      .withSuccessResponse[Seq[Vote]](201)
      .withErrorResponse[Unit](400)
        /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 :  (Successfully fetched)
   *   code 400 :  (bad input parameters)
   * 
   * @param questionId Get one question
   */
  def questionsQuestionIdGet(questionId: Int): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://questioner-system.herokuapp.com/api/v2", "/questions/{question_id}", "application/json")
      .withPathParam("question_id", questionId)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Unit](400)
        /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 201 : Seq[Vote] (Successfully voted)
   *   code 400 :  (bad input parameters)
   * 
   * Available security schemes:
   *   Bearer (apiKey)
   * 
   * @param questionId Do voting up
   * @param inventoryItem Inventory item to add
   */
  def questionsQuestionIdUpvotePatch(questionId: Int, inventoryItem: Option[Vote] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Vote]] =
    ApiRequest[Seq[Vote]](ApiMethods.PATCH, "https://questioner-system.herokuapp.com/api/v2", "/questions/{question_id}/upvote", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(inventoryItem)
      .withPathParam("question_id", questionId)
      .withSuccessResponse[Seq[Vote]](201)
      .withErrorResponse[Unit](400)
      

}

